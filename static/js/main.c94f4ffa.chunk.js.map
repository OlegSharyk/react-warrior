{"version":3,"sources":["components/MovieItem.js","components/MovieTabs.js","components/Pagination.js","utils/api.js","components/App.js","serviceWorker.js","index.js"],"names":["MovieItem","state","willWatch","this","props","movie","removeMovie","addMovieToWillWatch","removeMovieFromWillWatch","className","src","backdrop_path","poster_path","alt","title","vote_average","type","onClick","setState","bind","disabled","Component","MovieTabs","nextProps","nextState","sort_by","updateSortBy","handleClick","value","isActive","Pagination","onNextButtonClick","onPrevButtonClick","currentPage","totalPages","isPrevButtonDisabled","isNextButtonDisabled","aria-label","API_URL","API_KEY_3","App","getMovies","fetch","then","response","json","data","movies","results","total_pages","page","updateMovies","filter","item","id","updateMoviesWillWatch","moviesWillWatch","prevProps","prevState","map","index","key","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c94f4ffa.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass MovieItem extends Component {\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            willWatch: false,\r\n        };\r\n    }\r\n\r\n    // componentWillUnmount() {\r\n    //     console.log('unmount', this.props.movie.title);\r\n    // }\r\n\r\n    render() {\r\n        const {\r\n            movie,\r\n            removeMovie,\r\n            addMovieToWillWatch,\r\n            removeMovieFromWillWatch,\r\n        } = this.props;\r\n        return (\r\n            <div className=\"card\">\r\n                <img\r\n                    className=\"card-img-top\"\r\n                    src={`https://image.tmdb.org/t/p/w500${movie.backdrop_path ||\r\n                        movie.poster_path}`}\r\n                    alt=\"\"\r\n                />\r\n                <div className=\"card-body\">\r\n                    <h6 className=\"card-title\">{movie.title}</h6>\r\n                    <div className=\"d-flex justify-content-between align-items-center\">\r\n                        <p className=\"mb-0\">Rating: {movie.vote_average}</p>\r\n                        {this.state.willWatch ? (\r\n                            <button\r\n                                type=\"button\"\r\n                                className=\"btn btn-success\"\r\n                                onClick={() => {\r\n                                    this.setState({ willWatch: false });\r\n                                    removeMovieFromWillWatch(movie);\r\n                                }}\r\n                            >\r\n                                Remove Will Watch\r\n                            </button>\r\n                        ) : (\r\n                            <button\r\n                                type=\"button\"\r\n                                className=\"btn btn-secondary\"\r\n                                onClick={() => {\r\n                                    this.setState({ willWatch: true });\r\n                                    addMovieToWillWatch(movie);\r\n                                }}\r\n                            >\r\n                                Will Watch\r\n                            </button>\r\n                        )}\r\n                        <button\r\n                            onClick={removeMovie.bind(this, movie)}\r\n                            className=\"btn btn-danger\"\r\n                            disabled={this.state.willWatch}\r\n                        >\r\n                            delete\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MovieItem;\r\n\r\n// MovieItem\r\n// <div className=\"card\">\r\n//     <img\r\n//         className=\"card-img-top\"\r\n//         src={`https://image.tmdb.org/t/p/w500${item.backdrop_path ||\r\n//             data.poster_path}`}\r\n//         alt=\"\"\r\n//     />\r\n//     <div className=\"card-body\">\r\n//         <h6 className=\"card-title\">{data.title}</h6>\r\n//         <div className=\"d-flex justify-content-between align-items-center\">\r\n//             <p className=\"mb-0\">Rating: {data.vote_average}</p>\r\n//             <button type=\"button\" className=\"btn btn-secondary\">\r\n//                 Will Watch\r\n//             </button>\r\n//         </div>\r\n//     </div>\r\n// </div>;\r\n// MovieListWillWatch\r\n// <h4>Will Watch: movies</h4>\r\n// <ul className=\"list-group\">\r\n//     <li className=\"list-group-item\">\r\n//       <div className=\"d-flex justify-content-between\">\r\n//       </div>\r\n//     </li>\r\n//   ))}\r\n// </ul>\r\n","import React, { Component } from 'react';\r\n\r\nclass MovieTabs extends Component {\r\n    // UNSAFE_componentWillReceiveProps(nextProps, nextState) {\r\n    //     console.log('UNSAFE_componentWillReceiveProps');\r\n    //     console.log('nextProps sort_by', nextProps.sort_by);\r\n    //     console.log('prev Props ', this.props.sort_by);\r\n    // }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        if (nextProps.sort_by !== this.props.sort_by) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { sort_by, updateSortBy } = this.props;\r\n        const handleClick = value => () => updateSortBy(value);\r\n\r\n        const isActive = value => (sort_by === value ? 'active' : '');\r\n\r\n        return (\r\n            <ul className=\"tabs nav nav-pills\">\r\n                <li className=\"nav-item\">\r\n                    <div\r\n                        className={`nav-link ${isActive('popularity.desc')}`}\r\n                        onClick={handleClick('popularity.desc')}\r\n                    >\r\n                        Popularity\r\n                    </div>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                    <div\r\n                        className={`nav-link  ${isActive('revenue.desc')}`}\r\n                        onClick={handleClick('revenue.desc')}\r\n                    >\r\n                        Revenue\r\n                    </div>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                    <div\r\n                        className={`nav-link ${isActive('vote_average.desc')}`}\r\n                        onClick={handleClick('vote_average.desc')}\r\n                    >\r\n                        Vote average\r\n                    </div>\r\n                </li>\r\n            </ul>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MovieTabs;\r\n","import React, { Component } from 'react';\r\n\r\nclass Pagination extends Component {\r\n    render() {\r\n        const { onNextButtonClick, onPrevButtonClick } = this.props;\r\n        const { currentPage, totalPages } = this.props;\r\n\r\n        const isPrevButtonDisabled = currentPage === 1 ? 'disabled' : '';\r\n        const isNextButtonDisabled =\r\n            currentPage === totalPages ? 'disabled' : '';\r\n        return (\r\n            <nav\r\n                aria-label=\"Page navigation\"\r\n                className=\"d-flex justify-content-between\"\r\n            >\r\n                <ul className=\"pagination\">\r\n                    <li className={`page-item ${isPrevButtonDisabled}`}>\r\n                        <span className=\"page-link\" onClick={onPrevButtonClick}>\r\n                            Previous\r\n                        </span>\r\n                    </li>\r\n                    <li className={`page-item ${isNextButtonDisabled}`}>\r\n                        <span className=\"page-link\" onClick={onNextButtonClick}>\r\n                            Next\r\n                        </span>\r\n                    </li>\r\n                </ul>\r\n                <h4>\r\n                    page {currentPage} of {totalPages}\r\n                </h4>\r\n            </nav>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Pagination;\r\n","export const API_URL = 'https://api.themoviedb.org/3';\r\n\r\nexport const API_KEY_3 = '3f4ca4f3a9750da53450646ced312397';\r\n\r\nexport const API_KEY_4 =\r\n    'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIzZjRjYTRmM2E5NzUwZGE1MzQ1MDY0NmNlZDMxMjM5NyIsInN1YiI6IjVhYzlmNWRkOTI1MTQxNjJhZTA1Njk0NiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.Fc4f9DVB6pFWh6hIjYe0NCC4pImdmNzDIfi_3Nb3tC4';\r\n","import React, { Component } from 'react';\n// import { moviesData } from '../moviesData.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport MovieItem from './MovieItem';\nimport MovieTabs from './MovieTabs';\nimport Pagination from './Pagination';\nimport { API_KEY_3, API_URL } from '../utils/api';\n\n// console.log(moviesData);\n\n// UI = fn(state, props)\n\n// function removeMovie(movie) {\n//     const updateMovies = this.state.movies.filter(function(item) {\n//         return item.id !== movie.id;\n//     });\n//     console.log(updateMovies);\n//     this.setState({ movies: updateMovies });\n// }\n\nclass App extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n            movies: [],\n            moviesWillWatch: [],\n            sort_by: 'popularity.desc',\n            totalPages: 0,\n            currentPage: 1,\n        };\n\n        // this.removeMovie = this.removeMovie.bind(this)\n    }\n\n    componentDidMount() {\n        this.getMovies();\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevState.sort_by !== this.state.sort_by) {\n            this.getMovies();\n        }\n    }\n\n    getMovies = () => {\n        fetch(\n            `${API_URL}/discover/movie?api_key=${API_KEY_3}&sort_by=${this.state.sort_by}`,\n        )\n            .then(response => {\n                // // console.log(response);\n                return response.json();\n            })\n            .then(data => {\n                // console.log(data);\n                this.setState({\n                    movies: data.results,\n                    totalPages: data.total_pages,\n                    currentPage: data.page,\n                });\n            });\n    };\n\n    removeMovie = movie => {\n        const updateMovies = this.state.movies.filter(function(item) {\n            return item.id !== movie.id;\n        });\n        // console.log(updateMovies);\n        this.setState({ movies: updateMovies });\n    };\n\n    addMovieToWillWatch = movie => {\n        // const updateMoviesWillWatch = [...this.state.moviesWillWatch];\n        // updateMoviesWillWatch.push(movie);\n\n        const updateMoviesWillWatch = [...this.state.moviesWillWatch, movie];\n        this.setState({ moviesWillWatch: updateMoviesWillWatch });\n    };\n\n    removeMovieFromWillWatch = movie => {\n        const updateMoviesWillWatch = this.state.moviesWillWatch.filter(\n            function(item) {\n                return item.id !== movie.id;\n            },\n        );\n        // console.log(updateMovies);\n        this.setState({ moviesWillWatch: updateMoviesWillWatch });\n    };\n\n    updateSortBy = value => {\n        this.setState({ sort_by: value });\n    };\n\n    onNextButtonClick = value => {\n        if (this.state.currentPage === this.state.totalPages) {\n            return false;\n        }\n\n        fetch(\n            `${API_URL}/discover/movie?api_key=${API_KEY_3}&sort_by=${\n                this.state.sort_by\n            }&page=${this.state.currentPage + 1}`,\n        )\n            .then(response => {\n                return response.json();\n            })\n            .then(data => {\n                this.setState({\n                    movies: data.results,\n                    totalPages: data.total_pages,\n                    currentPage: data.page,\n                });\n            });\n    };\n\n    onPrevButtonClick = value => {\n        if (this.state.currentPage === 1) {\n            return false;\n        }\n\n        fetch(\n            `${API_URL}/discover/movie?api_key=${API_KEY_3}&sort_by=${\n                this.state.sort_by\n            }&page=${this.state.currentPage - 1}`,\n        )\n            .then(response => {\n                return response.json();\n            })\n            .then(data => {\n                this.setState({\n                    movies: data.results,\n                    totalPages: data.total_pages,\n                    currentPage: data.page,\n                });\n            });\n    };\n\n    render() {\n        return (\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-9\">\n                        <div className=\"row  mb-4 mt-4\">\n                            <div className=\"col-12\">\n                                <MovieTabs\n                                    sort_by={this.state.sort_by}\n                                    updateSortBy={this.updateSortBy}\n                                />\n                            </div>\n                        </div>\n                        <div className=\"row\">\n                            {this.state.movies.map((movie, index) => {\n                                return (\n                                    <div className=\"col-6 mb-4\" key={movie.id}>\n                                        <MovieItem\n                                            movie={movie}\n                                            removeMovie={this.removeMovie}\n                                            removeMovieFromWillWatch={\n                                                this.removeMovieFromWillWatch\n                                            }\n                                            addMovieToWillWatch={\n                                                this.addMovieToWillWatch\n                                            }\n                                        />\n                                    </div>\n                                );\n                            })}\n                        </div>\n                    </div>\n                    <div className=\"col-3\">\n                        <h4>Will watch: {this.state.moviesWillWatch.length}</h4>\n                        <ul className=\"list-group\">\n                            <li className=\"list-group-item\">\n                                <div className=\"d-flex justify-content-between\"></div>\n                            </li>\n                        </ul>\n                    </div>\n                </div>\n                <div className=\"row  mb-4 mt-4\">\n                    <div className=\"col-12\">\n                        <Pagination\n                            onNextButtonClick={this.onNextButtonClick}\n                            onPrevButtonClick={this.onPrevButtonClick}\n                            totalPages={this.state.totalPages}\n                            currentPage={this.state.currentPage}\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './stylesheets/index.scss';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}